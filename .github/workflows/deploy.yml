name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Sync code to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: "."
          target: "/www/wwwroot/caiobook"

      - name: Run remote deploy commands
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            PROJECT_PATH="/www/wwwroot/caiobook"
            LOG_DIR="$PROJECT_PATH/logs/deploy"

            # prepara logs
            mkdir -p "$LOG_DIR" && chmod 755 "$LOG_DIR"
            mkdir -p "$PROJECT_PATH/vorp/logs" && chmod 755 "$PROJECT_PATH/vorp/logs"
            TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
            LOG_FILE="$LOG_DIR/deploy-$TIMESTAMP.log"
            echo "=== Deploy iniciado em $(date) ===" >> "$LOG_FILE"
            exec > >(tee -a "$LOG_FILE") 2>&1

            cd "$PROJECT_PATH" || { echo "Diretório $PROJECT_PATH não encontrado"; exit 1; }

            # instala/atualiza deps
            echo "--- Preparando ambiente Python ---"
            [ ! -d "venv" ] && python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # gera e aplica migrations do app "db"
            echo "--- Gerando migrations para app 'db' ---"
            python3 vorp/manage.py makemigrations db --noinput || echo "Nenhuma migração pendente para 'db'"
            
            echo "--- Marcando todas as migrações do app db como aplicadas para evitar conflitos ---"
            python3 vorp/manage.py migrate db --fake || echo "Erro ao marcar migrações como fake, continuando..."
            
            echo "--- Executando migrações Django para outros apps ---"
            python3 vorp/manage.py migrate

            # coleta arquivos estáticos
            echo "--- Coletando arquivos estáticos ---"
            python3 vorp/manage.py collectstatic --noinput

            # configura unit do Gunicorn (sempre recria para garantir permissões corretas)
            SERVICE_FILE="/etc/systemd/system/gunicorn-vorp.service"
            echo "--- Criando/atualizando systemd service para Gunicorn ---"
            SERVICE_USER=$(whoami)
            sudo tee "$SERVICE_FILE" > /dev/null << EOF
            [Unit]
            Description=Gunicorn daemon for VORP Django project
            After=network.target

            [Service]
            User=${SERVICE_USER}
            Group=${SERVICE_USER}
            WorkingDirectory=${PROJECT_PATH}/vorp
            Environment=PATH=${PROJECT_PATH}/venv/bin
            ExecStart=${PROJECT_PATH}/venv/bin/gunicorn --access-logfile - --error-logfile - --workers 3 --bind unix:${PROJECT_PATH}/gunicorn.sock --timeout 120 vorp.wsgi:application
            ExecReload=/bin/kill -s HUP \$MAINPID
            KillMode=mixed
            TimeoutStopSec=5
            PrivateTmp=true
            Restart=always
            RestartSec=3

            [Install]
            WantedBy=multi-user.target
            EOF
            sudo systemctl daemon-reload
            sudo systemctl enable gunicorn-vorp.service

            # corrige permissões e reinicia o serviço Gunicorn
            echo "--- Corrigindo permissões e reiniciando gunicorn-vorp.service ---"
            sudo rm -f /www/wwwroot/caiobook/gunicorn.sock
            sudo chown -R $(whoami):$(whoami) /www/wwwroot/caiobook/
            sudo chmod 755 /www/wwwroot/caiobook/
            sudo systemctl restart gunicorn-vorp.service \
              && echo "Serviço gunicorn-vorp.service reiniciado com sucesso." \
              || echo "Falha ao reiniciar gunicorn-vorp.service."

            echo "=== Deploy finalizado em $(date) ==="
            echo "Logs disponíveis em $LOG_FILE"
