name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Sync code to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: "."
          target: "/www/wwwroot/caiobook"
          exclude: |
            .git
            .github
            venv
            logs
            __pycache__

      - name: Run remote deploy commands
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            PROJECT_PATH="/www/wwwroot/caiobook"
            LOG_DIR="$PROJECT_PATH/logs/deploy"

            # prepara logs
            mkdir -p "$LOG_DIR" && chmod 755 "$LOG_DIR"
            TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
            LOG_FILE="$LOG_DIR/deploy-$TIMESTAMP.log"
            echo "=== Deploy iniciado em $(date) ===" >> "$LOG_FILE"
            exec > >(tee -a "$LOG_FILE") 2>&1

            cd "$PROJECT_PATH" || { echo "Diretório $PROJECT_PATH não encontrado"; exit 1; }

            # instala/atualiza deps
            echo "--- Preparando ambiente Python ---"
            [ ! -d "venv" ] && python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # gera e aplica migrations do app "db"
            echo "--- Gerando migrations para app 'db' ---"
            python3 vorp/manage.py makemigrations db --noinput || echo "Nenhuma migração pendente para 'db'"
            echo "--- Executando migrações Django ---"
            python3 vorp/manage.py migrate

            # coleta arquivos estáticos
            echo "--- Coletando arquivos estáticos ---"
            python3 vorp/manage.py collectstatic --noinput

            # detecta e reinicia o serviço Gunicorn
            echo "--- Reiniciando serviço Gunicorn ---"
            SERVICE=$(systemctl list-units --type=service | grep -o 'gunicorn[^ ]*\.service' | head -n1)
            if [ -n "$SERVICE" ]; then
              sudo systemctl restart "$SERVICE" \
                && echo "Serviço $SERVICE reiniciado com sucesso." \
                || echo "Falha ao reiniciar $SERVICE."
            else
              echo "Nenhum serviço Gunicorn encontrado em systemd."
            fi

            echo "=== Deploy finalizado em $(date) ==="
            echo "Logs disponíveis em $LOG_FILE"
