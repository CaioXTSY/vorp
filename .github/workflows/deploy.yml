name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Faz checkout do seu código no runner
      - name: Check out repository
        uses: actions/checkout@v3

      # 2) Sincroniza apenas o que interessa para o servidor
      - name: Sync code to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: "."
          target: "/www/wwwroot/caiobook"
          # não envie venv, logs, .git, etc.
          exclude: |
            .git
            .github
            venv
            logs
            __pycache__

      # 3) Roda o deploy no servidor
      - name: Run remote deploy commands
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            PROJECT_PATH="/www/wwwroot/caiobook"
            LOG_DIR="$PROJECT_PATH/logs/deploy"

            # prepara logs
            mkdir -p "$LOG_DIR" && chmod 755 "$LOG_DIR"
            TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
            LOG_FILE="$LOG_DIR/deploy-$TIMESTAMP.log"
            echo "=== Deploy iniciado em $(date) ===" >> "$LOG_FILE"
            exec > >(tee -a "$LOG_FILE") 2>&1

            cd "$PROJECT_PATH" || { echo "Diretório $PROJECT_PATH não encontrado"; exit 1; }

            # instala/atualiza deps
            echo "--- Preparando ambiente Python ---"
            [ ! -d "venv" ] && python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # Django: migrações e coleta de estáticos
            echo "--- Executando migrações Django ---"
            source venv/bin/activate
            python3 vorp/manage.py migrate
            echo "--- Coletando arquivos estáticos ---"
            python3 vorp/manage.py collectstatic --noinput

            # reinicia serviço WSGI do Django
            echo "--- Reiniciando gunicorn_django.service ---"
            sudo systemctl restart gunicorn_django.service \
              && echo "Serviço Gunicorn/Django reiniciado com sucesso." \
              || echo "Falha ao reiniciar serviço Gunicorn/Django."

            echo "=== Deploy finalizado em $(date) ==="
            echo "Logs disponíveis em $LOG_FILE"
